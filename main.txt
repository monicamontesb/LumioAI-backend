from fastapi import FastAPI 
    > Import fastAPI that will allow the creation of the app web/API
app = FastAPI(title="Lumio MVP")
    > Instance of FastAPI called app
@app.get("/")
def read_root():
    return {"message": "Lumio Backend is working!"}
    > GET endpoint in the root route: each time someone navigates to the root /, fastAPI execute read_root function
    > and returns a JSON with a message
    > JSON is the standard format that the frontend uses to read data

from pydantic import BaseModel
    > automatically validate the data received from JSON
# Question Model
class Question(BaseModel):  >defines the expected structure for /ask
    role: str
    question: str
    > it must be enter a role and a question, both as strings

# Example Data for MVP 
faqs = {
    "developer": {
        "Where is the API documentation?": "You can find it in the project docs folder.",
        "How do I set up my dev environment?": "Follow the setup guide in the repo README."
    },
    "analyst": {
        "How do I access datasets?": "Check the Data Lake instructions in Confluence.",
        "What BI tools are used?": "We mainly use Power BI and Tableau."
    }
}

learning_plans = {
    "developer": ["Setup dev environment", "Read API docs", "Complete first feature"],
    "analyst": ["Access datasets", "Learn BI tools", "Build first report"]
}

> these are the dictionaries for examples for MVP

#POST: to answer questions
@app.post("/ask")   > post because we are sending data
def ask_question(q: Question):
    responses = faqs.get(q.role.lower(), {})    > we search for the role, if it doesnt exist, we return {}
    answer = responses.get(q.question, "Sorry, I don't have an answer for that yet.")   > we search the answer for the question, if not exists it returns default message
    return {"answer": answer}   > returns a JSON

#GET: to read the learning plan
@app.get("/learning-plan/{role}")   >GET because we only want to read the learning plan
def get_learning_plan(role: str):
    plan = learning_plans.get(role.lower(), ["No plan available for this role"])
    return {"plan": plan}